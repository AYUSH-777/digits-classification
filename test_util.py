from itertools import product
# import pytest
# from google.auth.transport import requests
# from api import app
from api.app import app
from joblib import load
from sklearn.linear_model import LogisticRegression

# from api.hello import
from utils import split_train_dev_test,read_digits,preprocess_data,tune_hparams
import os


# class MyHTTPClient:
#     def __init__(self, base_url):
#         self.base_url = base_url
#
#     def post(self, path, data):
#         url = self.base_url + path
#         return requests.post(url, json=data)


def test_hparamenter_count():
    gamma_ranges = [0.001, 0.01, 0.1, 1]
    C_ranges = [0.1, 1, 2, 5, 10]
    hparam_combos = product(gamma_ranges, C_ranges)
    print(hparam_combos)
    assert 20 == len(gamma_ranges)*len(C_ranges)



def test_in_gamma_ranges():
    gamma_ranges = [0.001, 0.01, 0.1, 1]
    ele = 0.1
    assert ele in gamma_ranges



# def test_post_predict():
#
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.2","0.0","11.999999999999982","13.000000000000004","5.000000000000021","8.881784197001265e-15","0.0","0.8","0.0","0.0","10.999999999999986","15.999999999999988","9.000000000000005","1.598721155460224e-14","0.0","0.0","0.0","2.9999999999999925","14.999999999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.00000001","1.7763568394002505e-14","0"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '0'
#
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.3","0.0","11.999999","13.000000000000004","5.000000000000021","8.88178419700","0.0","0.0","0.0","0.0","10.999999999999986","15.9999","9.000000000000005","1.598721155460224e-14","0.0","0.0","0.0","2.9999999","14.999999999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.0000001","1.7763568394004636732505e-14","1"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '1'
#
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.4","0.0","12.999999999999982","13.000000000000004","5.000000000000021","8.88178419700","0.0","0.0","0.0","0.3","10.999999999999986","15.999999","9.000000000","1.598721155460224e-15","0.0","0.0","0.0","2.9999999","14.99999999679999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.000000000004644006","1.7763568394002505e-14","2"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '2'
#
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.5","0.0","13.999999999999982","13.000000000000004","5.000000000000021","8.88178419700","0.0","0.0","0.5","0.6","10.999999999999986","15.9999","9.0000000005","1.598721155460224e-13","0.0","0.0","0.0","2.999999999","14.9999998999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.00000000000005786199","1.7763568394002505e-14","3"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '3'
#
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.6","0.0","14.999999999999982","13.000000000000004","5.000000000000021","8.881784197","0.0","0.0","0.5","0.4","10.999999999999986","15.9999999","9.000000000000005","1.59872124e-14","0.0","0.0","0.0","2.9999999","14.999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.00000000000001","1.7763568394002505e-14","4"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '4'
#
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.8","0.0","11.999999999999982","13.000000000000007","5.000000000000021","8.881784197","0.0","0.1","0.0","0.7","10.999999999999986","15.9999999","9.000000000000005","1.59872114e-16","0.0","0.0","0.0","2.99999999","14.999999994649999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.00000000000001","1.7763568394002505e-14","5"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '5'
#
#     response = app.test_client().post("/predict", json={"image": ["4.0","0.9","0.0","11.999999999999982","13.00000000","5.000000000000021","8.881784197001","0.0","0.0","0.3","0.6","10.999999999999986","15.999999","9.000000005","1.59872115544e-14","0.0","0.0","0.0","2.9999999999999925","14.999999999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.00000000000001","1.77635683940025054673e-14","6"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '6'
#
#     response = app.test_client().post("/predict", json={"image": ["5.0","0.1","0.0","11.999999999999982","13.000000000","5.000000000000021","8.8817841970","0.0","0.0","0.6","0.7","10.999999999999986","15.99999999","9.000000000000005","1.598721155460224e-17","0.0","0.0","0.0","2.9999999999999925","14.999999973399999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.9999999999999734786","15.999999999999993","10.00000000000001","1.776355746839400256605e-19","7"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '7'
#
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.6","0.0","11.999999999999982","13.0000000","5.000000000000021","8.8817841970012","0.0","0.0","0.8","0.0","10.999999999999986","15.99999999","9.000000000000005","1.598721155460224e-18","0.0","0.0","0.0","2.9999999999999925","14.999999999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.00000000000001","1.7763568394002505e-18","8"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '8'
#
#     response = app.test_client().post("/predict", json={"image": ["0.6","0.8","0.0","11.999999999999982","13.000000000","5.000000000000021","8.881784197001265e-15","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999988","9.000000000000005","1.598721155460224e-14","0.0","0.0","0.0","2.9999999999999925","14.999999999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","16.000001","1.7763568394002505e-20","9"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '9'
#     response = app.test_client().post("/predict", json={"image": ["0.0","0.0","0.0","11.999999999999982","13.000000000000004","5.000000000000021","8.881784197001265e-15","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999988","9.000000000000005","1.598721155460224e-14","0.0","0.0","0.0","2.9999999999999925","14.999999999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","14.00000000000001","1.7763568394002505e-34","10"]})
#     assert response.status_code == 200
#     assert response.data.decode('utf-8') == '10'


def test_if_loaded_model_is_linear_regression_model():
    # Load the model from the specified file
    best_model_path = './models/PGD22AI001_lr_lbfgs_.joblib'
    best_model = load(best_model_path)
    # Check if the loaded model is a Logistic Regression model
    assert isinstance(best_model, LogisticRegression)

    # assert isinstance(best_model, LogisticRegression), f"Expected Logistic Regression model, but got {type(best_model)}"

    # Check if the solver in the file name matches the solver used in the model
    # loaded_solver = loaded_model.get_params()['solver']
    # assert loaded_solver == expected_solver, f"Solver mismatch. Expected: {expected_solver}, Got: {loaded_solver}"


def test_if_loaded_model_is_linear_regression_model_1():
    best_model_path = './models/PGD22AI001_lr_lbfgs_.joblib'
    expected_solver = 'lbfgs'  # Assuming the solver is at the 3rd position in the file name
    best_model = load(best_model_path)
    loaded_solver = best_model.get_params()['solver']
    assert loaded_solver == expected_solver
    # assert loaded_solver == expected_solver, f"Solver mismatch. Expected: {expected_solver}, Got: {loaded_solver}"


def test_post_predict_1():
    response = app.test_client().post("/predict/svm", json={
        "image": [
            "0.0",
            "0.0",
            "0.0",
            "11.999999999999982",
            "13.000000000000004",
            "5.000000000000021",
            "8.881784197001265e-15",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "10.999999999999986",
            "15.999999999999988",
            "9.000000000000005",
            "1.598721155460224e-14",
            "0.0",
            "0.0",
            "0.0",
            "2.9999999999999925",
            "14.999999999999979",
            "15.999999999999998",
            "6.000000000000022",
            "1.0658141036401509e-14",
            "0.0",
            "6.217248937900871e-15",
            "6.999999999999987",
            "14.99999999999998",
            "15.999999999999996",
            "16.0",
            "2.0000000000000284",
            "3.552713678800507e-15",
            "0.0",
            "5.5220263365470826e-30",
            "6.21724893790087e-15",
            "1.0000000000000113",
            "15.99999999999998",
            "16.0",
            "3.000000000000022",
            "5.32907051820075e-15",
            "0.0",
            "0.0",
            "0.0",
            "0.9999999999999989",
            "15.99999999999998",
            "16.0",
            "6.000000000000015",
            "1.0658141036401498e-14",
            "0.0",
            "0.0",
            "0.0",
            "0.9999999999999989",
            "15.99999999999998",
            "16.0",
            "6.000000000000018",
            "1.0658141036401503e-14",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "10.999999999999986",
            "15.999999999999993",
            "10.00000000000001",
            "1.7763568394002505e-14",
            "0.0"
        ]
    })
    assert response.status_code == 200
    assert response.data.decode('utf-8') == '[1]'

    response = app.test_client().post("/predict/lr", json={
        "image": [
            "0.0",
            "0.0",
            "0.0",
            "11.999999999999982",
            "13.000000000000004",
            "5.000000000000021",
            "8.881784197001265e-15",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "10.999999999999986",
            "15.999999999999988",
            "9.000000000000005",
            "1.598721155460224e-14",
            "0.0",
            "0.0",
            "0.0",
            "2.9999999999999925",
            "14.999999999999979",
            "15.999999999999998",
            "6.000000000000022",
            "1.0658141036401509e-14",
            "0.0",
            "6.217248937900871e-15",
            "6.999999999999987",
            "14.99999999999998",
            "15.999999999999996",
            "16.0",
            "2.0000000000000284",
            "3.552713678800507e-15",
            "0.0",
            "5.5220263365470826e-30",
            "6.21724893790087e-15",
            "1.0000000000000113",
            "15.99999999999998",
            "16.0",
            "3.000000000000022",
            "5.32907051820075e-15",
            "0.0",
            "0.0",
            "0.0",
            "0.9999999999999989",
            "15.99999999999998",
            "16.0",
            "6.000000000000015",
            "1.0658141036401498e-14",
            "0.0",
            "0.0",
            "0.0",
            "0.9999999999999989",
            "15.99999999999998",
            "16.0",
            "6.000000000000018",
            "1.0658141036401503e-14",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "10.999999999999986",
            "15.999999999999993",
            "10.00000000000001",
            "1.7763568394002505e-14",
            "0.0"
        ]
    })
    assert response.status_code == 200
    assert response.data.decode('utf-8') == '[1]'


    response = app.test_client().post("/predict/tree", json={
        "image": [
            "0.0",
            "0.0",
            "0.0",
            "11.999999999999982",
            "13.000000000000004",
            "5.000000000000021",
            "8.881784197001265e-15",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "10.999999999999986",
            "15.999999999999988",
            "9.000000000000005",
            "1.598721155460224e-14",
            "0.0",
            "0.0",
            "0.0",
            "2.9999999999999925",
            "14.999999999999979",
            "15.999999999999998",
            "6.000000000000022",
            "1.0658141036401509e-14",
            "0.0",
            "6.217248937900871e-15",
            "6.999999999999987",
            "14.99999999999998",
            "15.999999999999996",
            "16.0",
            "2.0000000000000284",
            "3.552713678800507e-15",
            "0.0",
            "5.5220263365470826e-30",
            "6.21724893790087e-15",
            "1.0000000000000113",
            "15.99999999999998",
            "16.0",
            "3.000000000000022",
            "5.32907051820075e-15",
            "0.0",
            "0.0",
            "0.0",
            "0.9999999999999989",
            "15.99999999999998",
            "16.0",
            "6.000000000000015",
            "1.0658141036401498e-14",
            "0.0",
            "0.0",
            "0.0",
            "0.9999999999999989",
            "15.99999999999998",
            "16.0",
            "6.000000000000018",
            "1.0658141036401503e-14",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "10.999999999999986",
            "15.999999999999993",
            "10.00000000000001",
            "1.7763568394002505e-14",
            "0.0"
        ]
    })
    assert response.status_code == 200
    assert response.data.decode('utf-8') == '[1]'


    # response = app.test_client().post("/predict/lr", json={"image": ["0.0","0.3","0.0","11.999999","13.000000000000004","5.000000000000021","8.88178419700","0.0","0.0","0.0","0.0","10.999999999999986","15.9999","9.000000000000005","1.598721155460224e-14","0.0","0.0","0.0","2.9999999","14.999999999999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.0000001","1.7763568394004636732505e-14","1"]})
    # assert response.status_code == 200
    # assert response.data.decode('utf-8') == '1'
    #
    # response = app.test_client().post("/predict/tree", json={"image": ["0.0","0.4","0.0","12.999999999999982","13.000000000000004","5.000000000000021","8.88178419700","0.0","0.0","0.0","0.3","10.999999999999986","15.999999","9.000000000","1.598721155460224e-15","0.0","0.0","0.0","2.9999999","14.99999999679999979","15.999999999999998","6.000000000000022","1.0658141036401509e-14","0.0","6.217248937900871e-15","6.999999999999987","14.99999999999998","15.999999999999996","16.0","2.0000000000000284","3.552713678800507e-15","0.0","5.5220263365470826e-30","6.21724893790087e-15","1.0000000000000113","15.99999999999998","16.0","3.000000000000022","5.32907051820075e-15","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000015","1.0658141036401498e-14","0.0","0.0","0.0","0.9999999999999989","15.99999999999998","16.0","6.000000000000018","1.0658141036401503e-14","0.0","0.0","0.0","0.0","10.999999999999986","15.999999999999993","10.000000000004644006","1.7763568394002505e-14","2"]})
    # assert response.status_code == 200
    # assert response.data.decode('utf-8') == '2'